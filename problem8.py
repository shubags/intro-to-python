"""
Created on Sun Mar 18 19:29:43 2018
@author: patricio

find_all_groups_adj: given a string of digits and the size of the groups for
adjacent numbers (n) it computes all posible groups to form.

multiply_digits_num: multiply the digits of a numeric string
"""

def find_all_groups_adj(n, digits):
    grouped_ints = []
    all_groups_computed = False
    cont = 0
    while(cont+n<len(digits)):
        try:
            grouped_ints.append(digits[cont:n+cont])
            cont += 1
        except:
            all_groups_computed = True
    return grouped_ints
        

def multiply_digits_num(num_str):
    mult_result = 1
    for num in iter(num_str):
        mult_result *= int(num)
    return mult_result
    
digits = '73167176531330624919225119674426574742355349194934\
96983520312774506326239578318016984801869478851843\
85861560789112949495459501737958331952853208805511\
12540698747158523863050715693290963295227443043557\
66896648950445244523161731856403098711121722383113\
62229893423380308135336276614282806444486645238749\
30358907296290491560440772390713810515859307960866\
70172427121883998797908792274921901699720888093776\
65727333001053367881220235421809751254540594752243\
52584907711670556013604839586446706324415722155397\
53697817977846174064955149290862569321978468622482\
83972241375657056057490261407972968652414535100474\
82166370484403199890008895243450658541227588666881\
16427171479924442928230863465674813919123162824586\
17866458359124566529476545682848912883142607690042\
24219022671055626321111109370544217506941658960408\
07198403850962455444362981230987879927244284909188\
84580156166097919133875499200524063689912560717606\
05886116467109405077541002256983155200055935729725\
71636269561882670428252483600823257530420752963450'

digit_list = find_all_groups_adj(13, digits)
mult_list = [multiply_digits_num(num_str) for num_str in digit_list]

print(max(mult_list))
